#include "G4VProcess.hh"

#include "BFieldSteAct.hh"
//#include "B4bRunData.hh"
//#include "B4DetectorConstruction.hh"
//#include "G4Step.hh"
//#include "G4RunManager.hh"
#include "BFieldEveAct.hh"


BFieldSteAct::BFieldSteAct(BFieldEveAct* eveAct)
  : G4UserSteppingAction(), fEveAct(eveAct)
{
}

BFieldSteAct::~BFieldSteAct()
{
}

void BFieldSteAct::UserSteppingAction(const G4Step* step)
{
  
  // Who am I? Where am I? What am I undergoing?
  // // Track ID
  G4int trackID = step -> GetTrack() -> GetTrackID();
  // // Particle name
  G4String parName = step -> GetTrack() -> GetDefinition() -> GetParticleName();
  // // Particle ID
  G4int parID = step -> GetTrack() -> GetDefinition() -> GetPDGEncoding();
  // // Process name
  const G4VProcess* creProc = step -> GetTrack() -> GetCreatorProcess();
  G4String procName = step -> GetPostStepPoint() -> GetProcessDefinedStep() -> GetProcessName();
  // // Physical volume
  G4String namePrePV = step -> GetPreStepPoint() -> GetPhysicalVolume() -> GetName();
  G4String namePostPV;
  G4VPhysicalVolume* postPV = step -> GetPostStepPoint() -> GetPhysicalVolume();
  if ( postPV != 0 ) namePostPV = postPV -> GetName();
  else namePostPV = "outside";
  // // Status
  G4StepStatus preStat = step -> GetPreStepPoint() -> GetStepStatus();
  G4StepStatus postStat = step -> GetPostStepPoint() -> GetStepStatus();
  // // Position
  G4ThreeVector prePos = step -> GetPreStepPoint() -> GetPosition();
  G4ThreeVector postPos = step -> GetPostStepPoint() -> GetPosition();
  // // Momentum
  G4ThreeVector preMom = step -> GetPreStepPoint() -> GetMomentum();
  G4ThreeVector postMom = step -> GetPostStepPoint() -> GetMomentum();
  // // Kinetic energy
  G4double preKinEgy = step -> GetPreStepPoint() -> GetKineticEnergy();
  G4double postKinEgy = step -> GetPostStepPoint() -> GetKineticEnergy();
  // // Energy deposition
  G4double eDep = step -> GetTotalEnergyDeposit();

  // Set track ID
  fEveAct -> SetTrackID(trackID);

  // Set particle name
  fEveAct -> SetParName(trackID, parName);

  // Set particle ID
  fEveAct -> SetParID(trackID, parID);


  if ( namePrePV == "detPV" )
  {
    G4cout << "Hello? I'm in the cylinder!" << G4endl;
    fEveAct -> SetPosTar(trackID, postPos);
    fEveAct -> SetMomTar(trackID, postMom);
    fEveAct -> SetkinEgyTar(trackID, postKinEgy);
  }


  // Add process history inside target
  if ( (creProc) && (namePrePV == "tarPV") )
    {
      G4String creProcName = creProc -> GetProcessName();
      fEveAct -> AddProcHist(trackID, creProcName);
    }
  if ( (procName != "Transportation") && (namePrePV == "tarPV") )
    {
      fEveAct -> AddProcHist(trackID, procName);
      // G4cout << procName << G4endl;
      if ( procName == "hadElastic" ) fEveAct -> AddhadElastic(trackID);
      else if ( procName == "hIoni" ) fEveAct -> AddhIoni(trackID);
      else if ( procName == "CoulombScat" ) fEveAct -> AddCoulombScat(trackID);
      else if ( procName == "protonInelastic" ) fEveAct -> AddprotonInelastic(trackID);

      else fEveAct -> AddEtc(trackID);
    }

  // Set target exit position
  if ( (namePrePV == "tarPV") && (postStat == fGeomBoundary) )
    {
      fEveAct -> SetExitTar(trackID);
      fEveAct -> SetPosTar(trackID, postPos);
      fEveAct -> SetMomTar(trackID, postMom);
      fEveAct -> SetKinEgyTar(trackID, postKinEgy);
    }

  // Add energy deposition in target
  if ( namePrePV == "detPV" )
    {
      fEveAct -> AddEDepTar(trackID, eDep);
    }
}
  
  

  
  
  
  
  
  
  
  
  
  
  
	
	
	
	











	
       
	

	// Vervose
	/*G4cout << "PID: " << parName << ", Position: From ("
	       << prePos.x()  << ", " << prePos.y()  << ", " << prePos.z()  << ") to ("
	       << postPos.x() << ", " << postPos.y() << ", " << postPos.z() << ")" << G4endl;*/

